generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Users {
  userId       Int         @id @unique(map: "id_UNIQUE") @default(autoincrement()) @map("user_id")
  userName     String      @map("user_name") @db.VarChar(45)
  password     String      @db.VarChar(60)
  phone        String      @unique(map: "phone_UNIQUE") @db.Char(45)
  email        String?     @db.VarChar(45)
  createDate   DateTime?   @default(now()) @map("create_date")
  status       Boolean     @default(false)
  permissionId Int?
  permission   Permission? @relation(fields: [permissionId], references: [id])

  @@index([permissionId])
  @@map("users")
}

model Goods {
  id             Int        @id @unique(map: "id_UNIQUE") @default(autoincrement()) @map("goods_id")
  goodsName      String     @map("goods_name") @db.VarChar(45)
  goodsPrice     Int        @map("goods_price")
  goodsAmount    Int?       @default(0) @map("goods_amount")
  goodsImgs      String     @map("goods_imgs")
  goodsType      Int        @map("goods_type")
  type           GoodsTypes @relation(fields: [goodsType], references: [id])
  goodsOnSale    Boolean?   @default(false) @map("goods_on_sale")
  goodsDesc      String?    @map("goods_desc") @db.VarChar(45)
  goodsSellCount Int?       @map("goods_sell_count")
  goodsIsDel     Boolean?   @default(false) @map("goods_is_del")
  goodsComments  Comment[]

  @@index([goodsType])
  @@map("goods")
}

model GoodsTypes {
  id       Int     @id @unique(map: "id_UNIQUE") @default(autoincrement())
  typeCode String  @unique(map: "typeCode_UNIQUE") @map("type_code") @db.VarChar(45)
  typeName String  @unique(map: "typeName_UNIQUE") @map("type_name") @db.VarChar(45)
  typeMemo String? @map("type_memo") @db.VarChar(45)
  goods    Goods[]

  @@map("goods_types")
}

model Comment {
  authorId Int
  id       Int    @id @default(autoincrement())
  content  String
  author   Goods  @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@map("comment")
}

model Menu {
  id           Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  icon         String?     @db.LongText
  menuPath     String      @unique(map: "path_UNIQUE") @map("menu_path") @db.VarChar(45)
  menuName     String      @unique(map: "name_UNIQUE") @map("menu_name")
  permNode     Int?        @default(0) @map("perm_node")
  level        Int         @default(0) @map("menu_level")
  parentId     Int?
  parent       Menu?       @relation("menu", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Menu[]      @relation("menu")
  permission   Permission? @relation(fields: [permissionId], references: [id])
  permissionId Int?

  @@index([parentId])
  @@index([permissionId])
  @@map("menu")
}

model Permission {
  id              Int     @id @unique(map: "id_UNIQUE") @default(autoincrement())
  roleName        String  @unique(map: "role_name_UNIQUE") @map("role_name") @db.VarChar(45)
  members         Users[]
  permissionScope Menu[]

  @@map("permission")
}
